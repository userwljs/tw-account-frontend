/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

export interface AccountInfo {
    'id': string;
    'email': string;
}
export interface BodyEmailSendVerificationCodeEmailSendVerificationCodePost {
    'email': string;
}
export interface BodyRegisterAccountAccountRegisterPost {
    'verify_code': string;
    'email': string;
}
export interface EmailDomainRestrictionInfo {
    'restrict_email_domains': EmailDomainRestrictionInfoRestrictEmailDomainsEnum;
    'restricted_email_domains': Array<string>;
}

export const EmailDomainRestrictionInfoRestrictEmailDomainsEnum = {
    No: 'no',
    Blacklist: 'blacklist',
    Whitelist: 'whitelist'
} as const;

export type EmailDomainRestrictionInfoRestrictEmailDomainsEnum = typeof EmailDomainRestrictionInfoRestrictEmailDomainsEnum[keyof typeof EmailDomainRestrictionInfoRestrictEmailDomainsEnum];

export interface HTTPValidationError {
    'detail'?: Array<ValidationError>;
}
export interface Token {
    'access_token': string;
    'token_type'?: TokenTokenTypeEnum;
}

export const TokenTokenTypeEnum = {
    Bearer: 'bearer'
} as const;

export type TokenTokenTypeEnum = typeof TokenTokenTypeEnum[keyof typeof TokenTokenTypeEnum];

export interface ValidationError {
    'loc': Array<ValidationErrorLocInner>;
    'msg': string;
    'type': string;
}
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Email Domain Restriction Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailDomainRestrictionInfoEmailDomainRestrictionInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/domain_restriction_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Email Send Verification Code
         * @param {BodyEmailSendVerificationCodeEmailSendVerificationCodePost} bodyEmailSendVerificationCodeEmailSendVerificationCodePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailSendVerificationCodeEmailSendVerificationCodePost: async (bodyEmailSendVerificationCodeEmailSendVerificationCodePost: BodyEmailSendVerificationCodeEmailSendVerificationCodePost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyEmailSendVerificationCodeEmailSendVerificationCodePost' is not null or undefined
            assertParamExists('emailSendVerificationCodeEmailSendVerificationCodePost', 'bodyEmailSendVerificationCodeEmailSendVerificationCodePost', bodyEmailSendVerificationCodeEmailSendVerificationCodePost)
            const localVarPath = `/email/send_verification_code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyEmailSendVerificationCodeEmailSendVerificationCodePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccountLoginPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginAccountLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginAccountLoginPost', 'password', password)
            const localVarPath = `/account/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary My Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myInfoAccountMeInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/me/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register Account
         * @param {BodyRegisterAccountAccountRegisterPost} bodyRegisterAccountAccountRegisterPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccountAccountRegisterPost: async (bodyRegisterAccountAccountRegisterPost: BodyRegisterAccountAccountRegisterPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyRegisterAccountAccountRegisterPost' is not null or undefined
            assertParamExists('registerAccountAccountRegisterPost', 'bodyRegisterAccountAccountRegisterPost', bodyRegisterAccountAccountRegisterPost)
            const localVarPath = `/account/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyRegisterAccountAccountRegisterPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Email Domain Restriction Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailDomainRestrictionInfoEmailDomainRestrictionInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailDomainRestrictionInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailDomainRestrictionInfoEmailDomainRestrictionInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.emailDomainRestrictionInfoEmailDomainRestrictionInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Email Send Verification Code
         * @param {BodyEmailSendVerificationCodeEmailSendVerificationCodePost} bodyEmailSendVerificationCodeEmailSendVerificationCodePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailSendVerificationCodeEmailSendVerificationCodePost(bodyEmailSendVerificationCodeEmailSendVerificationCodePost: BodyEmailSendVerificationCodeEmailSendVerificationCodePost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailSendVerificationCodeEmailSendVerificationCodePost(bodyEmailSendVerificationCodeEmailSendVerificationCodePost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.emailSendVerificationCodeEmailSendVerificationCodePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAccountLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAccountLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loginAccountLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary My Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myInfoAccountMeInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myInfoAccountMeInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.myInfoAccountMeInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register Account
         * @param {BodyRegisterAccountAccountRegisterPost} bodyRegisterAccountAccountRegisterPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerAccountAccountRegisterPost(bodyRegisterAccountAccountRegisterPost: BodyRegisterAccountAccountRegisterPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerAccountAccountRegisterPost(bodyRegisterAccountAccountRegisterPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerAccountAccountRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Email Domain Restriction Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailDomainRestrictionInfoEmailDomainRestrictionInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<EmailDomainRestrictionInfo> {
            return localVarFp.emailDomainRestrictionInfoEmailDomainRestrictionInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Email Send Verification Code
         * @param {BodyEmailSendVerificationCodeEmailSendVerificationCodePost} bodyEmailSendVerificationCodeEmailSendVerificationCodePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailSendVerificationCodeEmailSendVerificationCodePost(bodyEmailSendVerificationCodeEmailSendVerificationCodePost: BodyEmailSendVerificationCodeEmailSendVerificationCodePost, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.emailSendVerificationCodeEmailSendVerificationCodePost(bodyEmailSendVerificationCodeEmailSendVerificationCodePost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccountLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.loginAccountLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary My Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myInfoAccountMeInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<AccountInfo> {
            return localVarFp.myInfoAccountMeInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register Account
         * @param {BodyRegisterAccountAccountRegisterPost} bodyRegisterAccountAccountRegisterPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccountAccountRegisterPost(bodyRegisterAccountAccountRegisterPost: BodyRegisterAccountAccountRegisterPost, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.registerAccountAccountRegisterPost(bodyRegisterAccountAccountRegisterPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Email Domain Restriction Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public emailDomainRestrictionInfoEmailDomainRestrictionInfoGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).emailDomainRestrictionInfoEmailDomainRestrictionInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Email Send Verification Code
     * @param {BodyEmailSendVerificationCodeEmailSendVerificationCodePost} bodyEmailSendVerificationCodeEmailSendVerificationCodePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public emailSendVerificationCodeEmailSendVerificationCodePost(bodyEmailSendVerificationCodeEmailSendVerificationCodePost: BodyEmailSendVerificationCodeEmailSendVerificationCodePost, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).emailSendVerificationCodeEmailSendVerificationCodePost(bodyEmailSendVerificationCodeEmailSendVerificationCodePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public loginAccountLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginAccountLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary My Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public myInfoAccountMeInfoGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).myInfoAccountMeInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register Account
     * @param {BodyRegisterAccountAccountRegisterPost} bodyRegisterAccountAccountRegisterPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public registerAccountAccountRegisterPost(bodyRegisterAccountAccountRegisterPost: BodyRegisterAccountAccountRegisterPost, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerAccountAccountRegisterPost(bodyRegisterAccountAccountRegisterPost, options).then((request) => request(this.axios, this.basePath));
    }
}



